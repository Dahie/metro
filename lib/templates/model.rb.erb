class <%= model_name %> < Metro::Model

  #
  # Example Event Handling Definitions
  #
  # @example Registering the keyboard down event to execute a block of code
  #
  # event :on_down, Gosu::GpLeft, Gosu::GpUp, do
  #   turn_left
  # end
  #
  # @example Registering the keyboard up key to execute the method `jump`
  #
  # event :on_up, KbEscape, do: :jump
  #
  # @example Registering for button held events that would build the model's acceleration
  #
  # event :on_hold, KbRight, Gosu::GpRight do
  #   acceleration += 1
  # end
  #
  # Keystroke and Game Event Reference
  #
  # @see https://github.com/jlnr/gosu/blob/master/Gosu/ButtonsMac.hpp
  # @see https://github.com/jlnr/gosu/blob/master/Gosu/ButtonsX.hpp
  # @see https://github.com/jlnr/gosu/blob/master/Gosu/ButtonsWin.hpp
  #
  #
  # @example Registering for an event called 'save_complete' event that anyone
  #   can generate and this scene block will execute this code.
  #
  # event :notification, :game_over do
  #   puts "Game is Over!"
  # end
  #
  # Within the models you could use the method `notification`
  # to generate the notification
  #
  # def update_score
  #   score = score + 1
  #   if score >= winning_score
  #     notification :game_over
  #   end
  #

  #
  # As model does a lot of work for you with regarding to setting up content, it is
  # best not to override #initialize and instead define an #after_initialize method
  # within the subclasses of Scene.
  #
  def after_initialize ; end

  #
  # This is called after every {#update} and when the OS wants the window to
  # repaint itself.
  #
  def draw ; end

end
