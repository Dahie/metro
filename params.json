{"name":"Metro","tagline":"Ruby 2D Gaming powered by Gosu.","body":"```\r\n  ______  ___      _____\r\n  ___   |/  /_____ __  /_______________\r\n  __  /|_/ / _  _ \\_  __/__  ___/_  __ \\\r\n  _  /  / /  /  __// /_  _  /    / /_/ /\r\n  /_/  /_/   \\___/ \\__/  /_/     \\____/\r\n\r\n```\r\n\r\nMetro is a framework built around [gosu](https://github.com/jlnr/gosu) (the 2D\r\ngame development library in Ruby). The goal of Metro is to enforce common\r\nconceptual structures and conventions making it easier to quickly generate a\r\ngame.\r\n\r\n[![Code Climate](https://codeclimate.com/badge.png)](https://codeclimate.com/github/burtlo/metro)\r\n\r\n[![Build Status](https://travis-ci.org/burtlo/metro.png)](https://travis-ci.org/burtlo/metro)\r\n\r\n[![Dependency Status](https://gemnasium.com/burtlo/metro.png)](https://gemnasium.com/burtlo/metro)\r\n\r\n## Why Use Metro?\r\n\r\nYou want to develop games in Ruby.\r\n\r\n### Why not just use Gosu?\r\n\r\nGosu does a lot of great work bringing OpenGL to Ruby. However, when you finish\r\nthe [initial tutorial](https://github.com/jlnr/gosu/wiki/Ruby-Tutorial) you are\r\nleft with a brittle game that is very resistant to changes or new features.\r\n\r\n* Metro provides the concept of a\r\n  [Scene](https://github.com/burtlo/metro/wiki/Scenes) which is the first\r\n  abstraction you would likely build after completing the tutorial.\r\n\r\n> Developing your game in individual scenes will make it easier to logically\r\nlayout your game.\r\n\r\n* Sane management of images, animations, fonts, songs, and samples through\r\n  [model properties](https://github.com/burtlo/metro/wiki/Model-properties).\r\n\r\n> Having to load and cache fonts and images in every one of your models is\r\ntedious. It is also is wasteful as several of the same fonts are being used all\r\nover the place.\r\n\r\n* [Key-frame animations](https://github.com/burtlo/metro/wiki/Animations)\r\n\r\n> Metro makes it simple to move an actor from one position to another position.\r\nSo simple movements, fades, color changes, and really any property change over\r\ntime is defined very simply.\r\n\r\n* [Event Handling](https://github.com/burtlo/metro/wiki/Events)\r\n\r\n> Delete those huge `if ... elsif ... else` input checking structures for\r\nkeyboard, gamepad, and mouse button presses (down,up, and held). Metro makes it\r\neasy to define them and an attach a course of action to take when the event\r\nhappens.\r\n\r\n### Why not use Chingu or Gamebox?\r\n\r\nBoth [Gamebox](https://github.com/shawn42/gamebox) and\r\n[Chingu](https://github.com/ippa/chingu) are more mature libraries with a\r\nlarger set of features. I encourage you to check out those libraries.\r\n\r\nMetro's primary goal is to be a framework of features that make game development\r\njoyful.\r\n\r\n* Active Reloading while building your scenes.\r\n\r\n> Adjustments to your game code while working on a scene will automatically\r\nreload your game code. The template game sets up a shortcut key (**Ctrl+R**)\r\nthat allows you to explicitly reload the game and the current scene.\r\n\r\n* Scene Edit Support\r\n\r\n> Scenes can enter an edit mode which allows you to re-position actors within\r\nthe scene. The changes can then be saved back to the view. This allows you to\r\nfine tune the layout of those scene elements, making it easier to get things\r\npixel perfect.\r\n\r\nMetro's secondary goal is to make it easier for individuals familiar with Rails\r\nget into game development. That is the reason for some of the design choices,\r\nthe opinionated structure, and generators that come with Metro.\r\n\r\n### Why you shouldn't use Metro?\r\n\r\nMetro has some the following limitations:\r\n\r\n* Limited to the gems defined within Metro\r\n\r\n> At this point in time you are not able to define and package additional\r\ndependencies with your game. This means if you are using a gem that is not\r\nalready defined by Metro you will run into trouble when running it on alternate\r\nsystems. This will likely be addressed in the future when more demand arises.\r\n\r\n* Difficult Deployment\r\n\r\n> For individuals to play your game, they will also have to install Metro.\r\nHowever, work is being made to bring some simple packaging to Metro games to\r\nmake them stand-along executables.\r\n\r\n## Installation\r\n\r\n```bash\r\n$ gem install metro\r\n```\r\n\r\n## Usage\r\n\r\n### Running a Game\r\n\r\nBy default `metro` will look for a file named 'metro' within the current working\r\ndirectory if no *gamefilename* has been provided.\r\n\r\n```bash\r\n$ metro GAMEFILENAME\r\n```\r\n\r\nPlease take a look at the [example game project](https://github.com/burtlo/starry-knight) that is being built alongside of 'metro'. It currently showcases all the current features available to the game.\r\n\r\n```bash\r\n$ git clone git://github.com/burtlo/starry-knight.git\r\n$ cd starry-knight\r\n$ metro\r\n```\r\n\r\n### Creating a Game\r\n\r\nMetro contains content generators to assist you.\r\n\r\nCreating a Game can be done with a single command.\r\n\r\n```bash\r\n$ metro new GAMENAME\r\n```\r\n\r\nThis should generate for you a starting game with a branding scene and a title\r\nscene. The game allows the player to start the game.\r\n\r\nThe game is missing the `first` scene of the game. This can be created with the\r\nscene generator:\r\n\r\n```bash\r\n$ metro generate scene first\r\n```\r\n\r\nThis should generate a scene in the scenes directory. The scene file contains a lot of examples of how to draw, animate and have your scene listen to events.\r\n\r\n## Resources\r\n\r\n### Programming\r\n\r\n* [YAML for Ruby](http://www.yaml.org/YAML_for_ruby.html) reference which can help you define views in the game.\r\n* [JSONLint](http://jsonlint.com/) is a JSON Validator\r\n\r\n### Art\r\n\r\n* [Lost Garden](http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html)\r\n* [TimelieFX](http://www.rigzsoft.co.uk/) particle editor allows you to export animations.\r\n* [Text to ASCII Art Generator](http://patorjk.com/software/taag)\r\n* [Icons](http://css-tricks.com/flat-icons-icon-fonts/)\r\n* [Subtle Patterns](http://subtlepatterns.com/) various backgrounds and textures.\r\n\r\n### Sound\r\n\r\n* [as3sfxr](http://www.superflashbros.net/as3sfxr/) generates unique sounds.\r\n* [Ableton](https://www.ableton.com/en/) music generation tool.\r\n\r\n### Books\r\n\r\n* [Rules of Play](http://www.amazon.com/dp/0262240459)\r\n* [Game Programming Gems 8](http://www.amazon.com/dp/1584507020)\r\n* [Game Feel](http://www.amazon.com/dp/0123743281)\r\n* [Game Coding Complete](http://www.amazon.com/dp/1584506806)\r\n* [Game Design Workshop](http://www.amazon.com/dp/0240809742)\r\n* [Challenges For Game Designers](http://www.amazon.com/dp/158450580X)\r\n* [The Art of Game Design: A book of lenses](http://www.amazon.com/dp/0123694965)\r\n* [A Theory of Fun](http://www.theoryoffun.com)\r\n* [Andrew Rollings and Ernest Adams on Game Design](http://www.amazon.com/dp/1592730019)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}